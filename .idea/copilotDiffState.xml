<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/login_hotmart.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/login_hotmart.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Automação de login na Hotmart SSO.&#10;&#10;Uso:&#10;- Crie um arquivo .env na raiz com HOTMART_EMAIL e HOTMART_PASSWORD.&#10;- Execute: python main.py&#10;&#10;Implementação:&#10;- Lê variáveis do .env&#10;- Usa Playwright (sync) para abrir o navegador, preencher credenciais e submeter o formulário.&#10;- Retorna True em caso de sucesso (detecção de redirecionamento ou elemento da área logada), False caso contrário.&#10;&#10;Observações:&#10;- Este script não instala o Playwright nem os navegadores. Execute `pip install -r requirements.txt` e `playwright install` antes de rodar.&#10;&quot;&quot;&quot;&#10;from os import getenv&#10;from time import sleep&#10;from dotenv import load_dotenv&#10;&#10;load_dotenv()&#10;&#10;HOTMART_LOGIN_URL = &quot;https://sso.hotmart.com/login?passwordless=false&amp;service=https%3A%2F%2Fsso.hotmart.com%2Foauth2.0%2FcallbackAuthorize%3Fclient_id%3D8cef361b-94f8-4679-bd92-9d1cb496452d%26redirect_uri%3Dhttps%253A%252F%252Fapp.hotmart.com%252Fauth%252Flogin%26response_type%3Dcode%26response_mode%3Dquery%26client_name%3DCasOAuthClient&quot;&#10;&#10;&#10;def login(headless: bool = True, timeout: int = 20) -&gt; bool:&#10;    &quot;&quot;&quot;Tenta logar na Hotmart usando credenciais do .env.&#10;&#10;    Retorna True se o login parecer bem-sucedido, False caso contrário.&#10;    &quot;&quot;&quot;&#10;    email = getenv(&quot;HOTMART_EMAIL&quot;)&#10;    password = getenv(&quot;HOTMART_PASSWORD&quot;)&#10;&#10;    if not email or not password:&#10;        print(&quot;Faltam HOTMART_EMAIL ou HOTMART_PASSWORD no .env&quot;)&#10;        return False&#10;&#10;    # Lazy import para evitar exigir playwright se ainda não instalado&#10;    try:&#10;        from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeout&#10;    except Exception as e:&#10;        print(&quot;Playwright não encontrado. Instale as dependências: pip install -r requirements.txt&quot;)&#10;        print(e)&#10;        return False&#10;&#10;    try:&#10;        with sync_playwright() as p:&#10;            browser = p.chromium.launch(headless=headless)&#10;            context = browser.new_context()&#10;            page = context.new_page()&#10;&#10;            print(f&quot;Abrindo {HOTMART_LOGIN_URL} ...&quot;)&#10;            page.goto(HOTMART_LOGIN_URL, timeout=timeout * 1000)&#10;&#10;            # Preencher email&#10;            # Observação: os seletores podem mudar. Ajuste se necessário.&#10;            try:&#10;                page.fill(&quot;input[type=Email], input[type=email], input[name=email]&quot;, email)&#10;            except Exception:&#10;                # Tenta por id/name conhecidos&#10;                if page.query_selector('#email'):&#10;                    page.fill('#email', email)&#10;                elif page.query_selector('input[name=&quot;username&quot;]'):&#10;                    page.fill('input[name=&quot;username&quot;]', email)&#10;                else:&#10;                    print(&quot;Não foi possível localizar o campo de email no formulário.&quot;)&#10;                    browser.close()&#10;                    return False&#10;&#10;            # Preencher senha&#10;            try:&#10;                page.fill(&quot;input[type=password], input[name=password]&quot;, password)&#10;            except Exception:&#10;                if page.query_selector('#password'):&#10;                    page.fill('#password', password)&#10;                else:&#10;                    print(&quot;Não foi possível localizar o campo de senha no formulário.&quot;)&#10;                    browser.close()&#10;                    return False&#10;&#10;            # Submeter o formulário: tenta clicar no botão de login&#10;            clicked = False&#10;            for sel in [&quot;button[type=submit]&quot;, &quot;button:has-text(\&quot;Entrar\&quot;)&quot;, &quot;button:has-text(\&quot;Login\&quot;)&quot;, &quot;button.login-button&quot;]:&#10;                try:&#10;                    btn = page.query_selector(sel)&#10;                    if btn:&#10;                        btn.click()&#10;                        clicked = True&#10;                        break&#10;                except Exception:&#10;                    continue&#10;&#10;            if not clicked:&#10;                # Tenta enviar Enter no campo de senha&#10;                page.press('input[type=password]', 'Enter')&#10;&#10;            # Aguardar navegação/indicador de sucesso&#10;            try:&#10;                # espera por redirect ou por um elemento que indica área autenticada&#10;                page.wait_for_load_state('networkidle', timeout=timeout * 1000)&#10;            except PlaywrightTimeout:&#10;                pass&#10;&#10;            sleep(1)&#10;&#10;            current_url = page.url&#10;            print(f&quot;URL atual após submissão: {current_url}&quot;)&#10;&#10;            # Heurística simples: se mudou para sso.hotmart.com/ ou contém 'dashboard' ou 'home'&#10;            success_indicators = [&quot;dashboard&quot;, &quot;home&quot;, &quot;app.hotmart&quot;, &quot;go.hotmart&quot;]&#10;            if any(ind in current_url for ind in success_indicators):&#10;                browser.close()&#10;                return True&#10;&#10;            # Ou verificar se existe algum elemento que apareça quando logado&#10;            logged_selector_candidates = [&quot;.user-menu&quot;, &quot;[data-qa=account-avatar]&quot;, &quot;img.profile&quot;]&#10;            for s in logged_selector_candidates:&#10;                try:&#10;                    if page.query_selector(s):&#10;                        browser.close()&#10;                        return True&#10;                except Exception:&#10;                    continue&#10;&#10;            # Falha&#10;            print(&quot;Não detectado sucesso no login. Verifique credenciais e seletores.&quot;)&#10;            browser.close()&#10;            return False&#10;&#10;    except Exception as exc:&#10;        print(&quot;Erro durante a automação:&quot;, exc)&#10;        return False&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Automação de login na Hotmart SSO.&#10;&#10;Uso:&#10;- Crie um arquivo .env na raiz com HOTMART_EMAIL e HOTMART_PASSWORD.&#10;- Execute: python main.py&#10;&#10;Implementação:&#10;- Lê variáveis do .env&#10;- Usa Playwright (sync) para abrir o navegador, preencher credenciais e submeter o formulário.&#10;- Retorna True em caso de sucesso (detecção de redirecionamento ou elemento da área logada), False caso contrário.&#10;&#10;Observações:&#10;- Este script não instala o Playwright nem os navegadores. Execute `pip install -r requirements.txt` e `playwright install` antes de rodar.&#10;&quot;&quot;&quot;&#10;from os import getenv&#10;from time import sleep&#10;from dotenv import load_dotenv&#10;from pathlib import Path&#10;from datetime import datetime, timezone&#10;from typing import Optional&#10;&#10;load_dotenv()&#10;&#10;HOTMART_LOGIN_URL = &quot;https://sso.hotmart.com/login?passwordless=false&amp;service=https%3A%2F%2Fsso.hotmart.com%2Foauth2.0%2FcallbackAuthorize%3Fclient_id%3D8cef361b-94f8-4679-bd92-9d1cb496452d%26redirect_uri%3Dhttps%253A%252F%252Fapp.hotmart.com%252Fauth%252Flogin%26response_type%3Dcode%26response_mode%3Dquery%26client_name%3DCasOAuthClient&quot;&#10;&#10;&#10;def _ensure_screenshot_dir(task_id: str) -&gt; Path:&#10;    project_root = Path(__file__).resolve().parent&#10;    screenshots_dir = project_root / '.history' / task_id / 'screenshots'&#10;    screenshots_dir.mkdir(parents=True, exist_ok=True)&#10;    return screenshots_dir&#10;&#10;&#10;def _save_screenshot(page, screenshots_dir: Path, prefix: str) -&gt; Optional[Path]:&#10;    try:&#10;        # usa timezone-aware UTC&#10;        ts = datetime.now(timezone.utc).strftime('%Y%m%dT%H%M%SZ')&#10;        filename = f&quot;{prefix}_{ts}.png&quot;&#10;        path = screenshots_dir / filename&#10;        page.screenshot(path=str(path), full_page=True)&#10;        print(f&quot;Screenshot salva: {path}&quot;)&#10;        return path&#10;    except Exception as e:&#10;        print(&quot;Falha ao salvar screenshot:&quot;, e)&#10;        return None&#10;&#10;&#10;def login(headless: bool = True, timeout: int = 20, screenshot_on_failure: bool = True, task_id: str = &quot;TASK-20251031-001&quot;) -&gt; bool:&#10;    &quot;&quot;&quot;Tenta logar na Hotmart usando credenciais do .env.&#10;&#10;    Retorna True se o login parecer bem-sucedido, False caso contrário.&#10;    &quot;&quot;&quot;&#10;    email = getenv(&quot;HOTMART_EMAIL&quot;)&#10;    password = getenv(&quot;HOTMART_PASSWORD&quot;)&#10;&#10;    if not email or not password:&#10;        print(&quot;Faltam HOTMART_EMAIL ou HOTMART_PASSWORD no .env&quot;)&#10;        return False&#10;&#10;    screenshots_dir = None&#10;    if screenshot_on_failure:&#10;        try:&#10;            screenshots_dir = _ensure_screenshot_dir(task_id)&#10;        except Exception as e:&#10;            print(&quot;Não foi possível criar pasta de screenshots:&quot;, e)&#10;            screenshots_dir = None&#10;&#10;    # Lazy import para evitar exigir playwright se ainda não instalado&#10;    try:&#10;        from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeout&#10;    except Exception as e:&#10;        print(&quot;Playwright não encontrado. Instale as dependências: pip install -r requirements.txt&quot;)&#10;        print(e)&#10;        return False&#10;&#10;    try:&#10;        with sync_playwright() as p:&#10;            browser = p.chromium.launch(headless=headless)&#10;            context = browser.new_context()&#10;            page = context.new_page()&#10;&#10;            print(f&quot;Abrindo {HOTMART_LOGIN_URL} ...&quot;)&#10;            page.goto(HOTMART_LOGIN_URL, timeout=timeout * 1000)&#10;&#10;            # Preencher email&#10;            # Observação: os seletores podem mudar. Ajuste se necessário.&#10;            try:&#10;                page.fill(&quot;input[type=Email], input[type=email], input[name=email]&quot;, email)&#10;            except Exception:&#10;                # Tenta por id/name conhecidos&#10;                if page.query_selector('#email'):&#10;                    page.fill('#email', email)&#10;                elif page.query_selector('input[name=&quot;username&quot;]'):&#10;                    page.fill('input[name=&quot;username&quot;]', email)&#10;                else:&#10;                    print(&quot;Não foi possível localizar o campo de email no formulário.&quot;)&#10;                    if screenshot_on_failure and screenshots_dir is not None:&#10;                        _save_screenshot(page, screenshots_dir, 'missing_email')&#10;                    browser.close()&#10;                    return False&#10;&#10;            # Preencher senha&#10;            try:&#10;                page.fill(&quot;input[type=password], input[name=password]&quot;, password)&#10;            except Exception:&#10;                if page.query_selector('#password'):&#10;                    page.fill('#password', password)&#10;                else:&#10;                    print(&quot;Não foi possível localizar o campo de senha no formulário.&quot;)&#10;                    if screenshot_on_failure and screenshots_dir is not None:&#10;                        _save_screenshot(page, screenshots_dir, 'missing_password')&#10;                    browser.close()&#10;                    return False&#10;&#10;            # Submeter o formulário: tenta clicar no botão de login&#10;            clicked = False&#10;            for sel in [&quot;button[type=submit]&quot;, &quot;button:has-text(\&quot;Entrar\&quot;)&quot;, &quot;button:has-text(\&quot;Login\&quot;)&quot;, &quot;button.login-button&quot;]:&#10;                try:&#10;                    btn = page.query_selector(sel)&#10;                    if btn:&#10;                        btn.click()&#10;                        clicked = True&#10;                        break&#10;                except Exception:&#10;                    continue&#10;&#10;            if not clicked:&#10;                # Tenta enviar Enter no campo de senha&#10;                try:&#10;                    page.press('input[type=password]', 'Enter')&#10;                except Exception:&#10;                    # se não der, tenta screenshot e falha&#10;                    if screenshot_on_failure and screenshots_dir is not None:&#10;                        _save_screenshot(page, screenshots_dir, 'submit_failed')&#10;                    print(&quot;Não foi possível submeter o formulário.&quot;)&#10;                    browser.close()&#10;                    return False&#10;&#10;            # Aguardar navegação/indicador de sucesso&#10;            try:&#10;                # espera por redirect ou por um elemento que indica área autenticada&#10;                page.wait_for_load_state('networkidle', timeout=timeout * 1000)&#10;            except PlaywrightTimeout:&#10;                pass&#10;&#10;            sleep(1)&#10;&#10;            current_url = page.url&#10;            print(f&quot;URL atual após submissão: {current_url}&quot;)&#10;&#10;            # Heurística simples: se mudou para sso.hotmart.com/ ou contém 'dashboard' ou 'home'&#10;            success_indicators = [&quot;dashboard&quot;, &quot;home&quot;, &quot;app.hotmart&quot;, &quot;go.hotmart&quot;]&#10;            if any(ind in current_url for ind in success_indicators):&#10;                browser.close()&#10;                return True&#10;&#10;            # Ou verificar se existe algum elemento que apareça quando logado&#10;            logged_selector_candidates = [&quot;.user-menu&quot;, &quot;[data-qa=account-avatar]&quot;, &quot;img.profile&quot;]&#10;            for s in logged_selector_candidates:&#10;                try:&#10;                    if page.query_selector(s):&#10;                        browser.close()&#10;                        return True&#10;                except Exception:&#10;                    continue&#10;&#10;            # Falha: salvar screenshot para debug&#10;            print(&quot;Não detectado sucesso no login. Verifique credenciais e seletores.&quot;)&#10;            if screenshot_on_failure and screenshots_dir is not None:&#10;                _save_screenshot(page, screenshots_dir, 'login_failed')&#10;            browser.close()&#10;            return False&#10;&#10;    except Exception as exc:&#10;        print(&quot;Erro durante a automação:&quot;, exc)&#10;        # tenta salvar screenshot se houver página disponível&#10;        try:&#10;            if screenshot_on_failure and 'page' in locals() and screenshots_dir is not None:&#10;                _save_screenshot(page, screenshots_dir, 'exception')&#10;        except Exception as e:&#10;            print(&quot;Falha ao capturar screenshot da exceção:&quot;, e)&#10;        return False" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>